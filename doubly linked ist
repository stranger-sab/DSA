#include <stdio.h>
#include <stdlib.h>

// node creation
typedef struct Node {
  int data;
  struct Node* next;
  struct Node* prev;
}Node;

Node* head =NULL;
//Node *stnode, *ennode;
//struct Node* start=NULL;
// insert node at the front
void insertFront() {
  // allocate memory for newNode
   // Node* head;
    int data;
    Node* newNode = ( Node*)malloc(sizeof( Node));
    printf("\nEnter the number to inserted:");
    scanf("%d",&data);
  // assign data to newNode
    newNode->data = data;

  // make newNode as a head
    newNode->next = head;

  // assign null to prev
    newNode->prev = NULL;

  // previous of head (now head is the second node) is newNode
    if (head != NULL)
        head->prev = newNode;

  // head points to newNode
    head = newNode;
}

// insert a node after a specific node
void insert() {
    //paranthesis ulla varradhu (struct Node* prev_node, int data) if theva patta
  // check if previous node is null
  // Node* head;
   //Node* prev_node;
  int data;
  int pos,i=1;

  // allocate memory for newNode
  Node* newNode = (Node*)malloc(sizeof(Node));
  printf("\nEnter position and data:");
  scanf("%d %d",&pos,&data);
  // assign data to newNode
  Node* temp = head;
  newNode->data = data;
  while(i<pos-1){
        temp=temp->next;
        i++;
  }
  // set next of newNode to next of prev node
  newNode->next = temp->next;
  temp->next=newNode;
  //newNode->prev->next=newNode;

  // set next of prev node to newNode
  //prev_node->next = newNode;

  // set prev of newNode to the previous node
  newNode->prev = temp;

  // set prev of newNode's next to newNode
  if (newNode->next != NULL)
    newNode->next->prev = newNode;
}

// insert a newNode at the end of the list
void insertEnd() {
  // allocate memory for node
   //  Node* head;
    int data;
     Node* newNode = (Node*)malloc(sizeof( Node));
    printf("\nEnter the number to inserted");
    scanf("%d",&data);

  // assign data to newNode
    newNode->data = data;

  // assign null to next of newNode
    newNode->next = NULL;

  // store the head node temporarily (for later use)
    Node* temp = head;

  // if the linked list is empty, make the newNode as head node
    if (head == NULL) {
        newNode->prev = NULL;
        head = newNode;
        return;
    }

  // if the linked list is not empty, traverse to the end of the linked list
    while (temp->next != NULL)
        temp = temp->next;

  // now, the last node of the linked list is temp

  // assign next of the last node (temp) to newNode
    temp->next = newNode;

  // assign prev of newNode to temp
    newNode->prev = temp;
}

// delete a node from the doubly linked list
void deleteNode(Node* del_node) {
  // if head or del is null, deletion is not possible
  if (head == NULL || del_node == NULL)
    return;

  // if del_node is the head node, point the head pointer to the next of del_node
  if (head == del_node)
    head = del_node->next;

  // if del_node is not at the last node, point the prev of node next to del_node to the previous of del_node
  if (del_node->next != NULL)
    del_node->next->prev = del_node->prev;

  // if del_node is not the first node, point the next of the previous node to the next node of del_node
  if (del_node->prev != NULL)
    del_node->prev->next = del_node->next;

  // free the memory of del_node
  free(del_node);
}




// print the doubly linked list
void displayList(Node* node) {
   Node* last;

  while (node != NULL) {
    printf("%d->", node->data);
    last = node;
    node = node->next;
  }
  if (node == NULL)
    printf("NULL\n");
}

void create(int n)
{
    int i, num, data;
    Node *fnnode;

    if(n >= 1)
    {
      /*  stnode = (Node*)malloc(sizeof( Node));

        if(stnode != NULL)
        {
            printf(" Input data for node 1 : "); // assigning data in the first node
            scanf("%d", &data);

            stnode->data = data;
            stnode->prev = NULL;
            stnode->next = NULL;
            ennode = stnode;*/
// putting data for rest of the nodes
            for(i=1; i<=n; i++)
            {
                fnnode = ( Node *)malloc(sizeof(Node));
                if(fnnode != NULL)
                {
                    insertEnd();
                   /* printf(" Input data for node %d : ", i);
                    scanf("%d",&data);
                    fnnode->data = data;
                    fnnode->prev = ennode;    // new node is linking with the previous node
                    fnnode->next = NULL;

                    ennode->next = fnnode;   // previous node is linking with the new node
                    ennode = fnnode;   */         // assign new node as last node
                }
                else
                {
                    printf(" Memory can not be allocated.");
                    break;
                }
            }
        }
        else
        {
            printf(" Memory can not be allocated.");
        }
    }


void sort()
{
    int x;
    Node *p,*q;
    p = (Node*)malloc(sizeof(Node));
    q = (Node*)malloc(sizeof(Node));
    p = head;

    while(p->next != NULL)
    {
        q = head;
        while(q->next != NULL)
        {
            if((q->data)>(q->next->data))
				{
					x = q->data;
                    q->data=q->next->data;
                    q->next->data=x;

				}
            q = q->next;
        }
        p=p->next;
    }
}

int main() {
    int n,de;
    printf("\nEnter no of nodes: ");
    scanf("%d",&n);
  // initialize an empty node
  // Node* head = NULL;
    create(n);
    printf("\n 1 - Insert at beginning");
    printf("\n 2 - Insert at end");
    printf("\n 3 - Insert at some position");
    printf("\n 4 - Delete at i");
    printf("\n 5 - Display ");
   // printf("\n 6 - Search for element");
    printf("\n 7 - Sort the list");
    printf("\n 8 - Exit");
    insertFront();
    insert();
    printf("enter element to be deleted:");
    scanf("%d",&de);
    deleteNode(de);
    sort();

  // insert 11 after head
 // insertAfter(head, 11);

  // insert 15 after the seond node
  //insertAfter(head->next, 15);

    displayList(head);

  // delete the last node
  //deleteNode(&head, head->next->next->next->next->next);

 // displayList(head);
}
